#!/usr/bin/env python3

import string
import sys
import os

def main():
    if len(sys.argv) < 2:
        print('first arg must be the xor key, or -c to crack', file=sys.stdout)
        exit(1)

    if '-c' in sys.argv:
        out = crack(sys.stdin.buffer.read())
        sys.stdout.buffer.write(out)
    else:
        key = ord(sys.argv[1][0])
        out = do_xor(sys.stdin.buffer.read(), key)
        sys.stdout.buffer.write(out)

def crack(inp):
    best_score = None
    best_plain = ''
    for c in range(256):
        plain = do_xor(inp, c)
        score = calculate_score(plain)
        if best_score == None or score > best_score:
            best_score = score
            best_plain = plain

    return best_plain

DIST = {'a':8,
        'b':1,
        'c':3,
        'd':4,
        'e':13,
        'f':2,
        'g':2,
        'h':6,
        'i':7,
        'j':0,
        'k':1,
        'l':4,
        'm':2,
        'n':7,
        'o':8,
        'p':2,
        'q':0,
        'r':6,
        's':6,
        't':9,
        'u':3,
        'v':1,
        'w':2,
        'x':0,
        'y':2,
        'z':0,
        ' ':20}
def calculate_score(inp):
    dist = {}
    score = 0
    alph = (string.ascii_letters + ' ').encode('ascii')
    for c in inp:
        if c in alph:
            c = chr(c).lower()
            if c in dist:
                dist[c] += 1
            else:
                dist[c] = 1
        else:
            score -= 12
    for key in dist:
        score += dist[key] * DIST[key]
    return score

def do_xor(inp, key):
    # Byte by byte XOR.
    out = bytearray()
    for byte in inp:
        out.append(byte ^ key)
        
    return out

main()
